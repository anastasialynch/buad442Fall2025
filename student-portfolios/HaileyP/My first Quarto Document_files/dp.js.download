/* version 5.20 (date)
add indentation for module menu items with existing class indent_1 through indent_3
change id of waited for div from #main to #wiki_page_show. Trying to get this to work more consistently, but it's hard because I don't get why it is failing in the first place. It is inconsistent.
change delay before go fires a second time from 300 to 500 msec. Not sure why it fires a second time at all, but I can't seem to prevent it
*/
var testing = false;
/*--- waitForKeyElements():  A utility function, for Greasemonkey scripts,
    that detects and handles AJAXed content.

    Usage example:

        waitForKeyElements (
            "div.comments"
            , commentCallbackFunction
        );

        //--- Page-specific function to do what we want when the node is found.
        function commentCallbackFunction (jNode) {
            jNode.text ("This comment changed by waitForKeyElements().");
        }

    IMPORTANT: This function requires your script to have loaded jQuery.
*/
function waitForKeyElements (
    selectorTxt,    /* Required: The jQuery selector string that
                        specifies the desired element(s).
                    */
    actionFunction, /* Required: The code to run when elements are
                        found. It is passed a jNode to the matched
                        element.
                    */
    bWaitOnce,      /* Optional: If false, will continue to scan for
                        new elements even after the first match is
                        found.
                    */
    iframeSelector  /* Optional: If set, identifies the iframe to
                        search.
                    */
) {
    var targetNodes, btargetsFound;

    if (typeof iframeSelector == "undefined")
        targetNodes     = $(selectorTxt);
    else
        targetNodes     = $(iframeSelector).contents ()
                                           .find (selectorTxt);

    if (targetNodes  &&  targetNodes.length > 0) {
        btargetsFound   = true;
        /*--- Found target node(s).  Go through each and act if they
            are new.
        */
        targetNodes.each ( function () {
            var jThis        = $(this);
            var alreadyFound = jThis.data ('alreadyFound')  ||  false;

            if (!alreadyFound) {
                //--- Call the payload function.
                console.log(actionFunction)
                var cancelFound     = actionFunction (jThis);
                if (cancelFound)
                    btargetsFound   = false;
                else
                    jThis.data ('alreadyFound', true);
            }
        } );
    }
    else {
        btargetsFound   = false;
    }

    //--- Get the timer-control variable for this selector.
    var controlObj      = waitForKeyElements.controlObj  ||  {};
    var controlKey      = selectorTxt.replace (/[^\w]/g, "_");
    var timeControl     = controlObj [controlKey];

    //--- Now set or clear the timer as appropriate.
    if (timeControl) {//btargetsFound  &&  bWaitOnce  &&
        //--- The only condition where we need to clear the timer.
        clearInterval (timeControl);
        delete controlObj [controlKey]
    }
    else {
        //--- Set a timer, if needed.
        if ( ! timeControl) {
            timeControl = setInterval ( function () {
                    waitForKeyElements (    selectorTxt,
                                            actionFunction,
                                            bWaitOnce,
                                            iframeSelector
                                        );
                },
                500
            );
            controlObj [controlKey] = timeControl;
        }
    }
    waitForKeyElements.controlObj   = controlObj;
}

function cloneForm(){
    if($("#launch_presentation_document_target").val()=="iframe")return;
    
    var c = $("#tool_form").clone().attr('id','ats-jumpout').css("margin",0);
    c.attr("target","ats").appendTo("#breadcrumbs ul").show().css("float","right").children("button").text("Open in New Window");
};


var domain = "https://www.udel.edu/it/canvas/branding-inc/beta/";//
(function($){//shell for plugin

    $.fn.enableUdats = function(){//this is the method people will call to invoke the plugin in a jQuery chain
        return $(this).each(function(e) {//operation to perform on each element passed through, in this case, the entire document
        // launch link in overlay
        $("div.udats-tabs").tabs();
        $("div.udats-accordion h3").each(function(index,element){
          var s = $(this).text();
          var html = "<a>" + s + "</a>";
          $(this).html(html);
        });
    //  $("div.udats-accordion div").html().wrap('<div class="pad-box-mini"></div>');
        $("div.udats-accordion").addClass("ui-accordion--mini").accordion();
        $("ul.udats-menu").menu().css("margin-right","10px").parent().css("width","450px");
        
        
         if($("a[target='udats-dialog'],a.udats-dialog").length){
             //need to store this elsewhere, as Canvas is rewriting it, this should catch existing
             //newly created dialogs will use class instead of target, and since data atts are being stripped by Canvas, we're moving features to data-features from title here
             $("a[target='udats-dialog'],a.udats-dialog").each(function(index, element) {
                $(this).addClass("udats-dialog");
                var features = $(this).attr("title");
                $(this).data("features",features);
                $(this).attr("title","");
            });
            $("a.udats-dialog").each(function(index, element) {
                
                var id = $(this).attr("href");
                var autoopen = id == "#udats_mm" ? true : false;
                var dobj = new Object();
                dobj.autoOpen=autoopen;
                dobj.draggable=true;
                dobj.resizeable=true;
                dobj.show=500;
                 var features = $(this).data("features") ? $(this).data("features").split("|"): "";
                     if(features.length>1){//reset features of dialog
                         for(var i=0;i<features.length;i++){
                             var option = features[i].split(":");
                             if(option[1]=="true")option[1]=true;
                             if(option[1]=="false")option[1]=false;
                             dobj[option[0]]=option[1];
                         }
                        
                     }
                $(id).dialog(dobj);
                    
                        /*{autoOpen: autoopen,
                        location:
                        draggable:true,
                        resizeable:true,
                        show:500}*/
                
            });
    // look for #udats_mm
            if($("#udats_mm").length){
                var menudiv = $("#udats_mm");
                var modlink = menudiv.find("a[data-api-returntype=Module]");
                var str = modlink.data("api-endpoint");
                var title = modlink.text();
                
                var temparr = str.split("/");
                var courseid = temparr[6];
                var modid = temparr[8];
                var url = "/courses/"+courseid+"/modules #context_module_content_"+modid;
                menudiv.load(url,function(){$(this).find("div div div").hide();
                $(this).find("li.indent_1").css("marginLeft","5%").css("width","95%");
                $(this).find("li.indent_2").css("marginLeft","10%").css("width","90%");
                $(this).find("li.indent_3").css("marginLeft","15%").css("width","85%");
        $(this).parent().css("position","fixed");})
          menudiv.dialog("option","title",title);
            }
                    
                 $("a.udats-dialog").click(function(obj){
                     obj.preventDefault();
                    var did = $(this).attr("href").charAt(0)=="#" ? $(this).attr("href") : "#udats-dialog";
                     var features = $(this).data("features") ? $(this).data("features").split("|"): "";
                     if(features.length>1){//reset features of dialog
                         for(var i=0;i<features.length;i++){
                             var option = features[i].split(":");
                             if(option[0]=="title" && did=="#udats_mm")continue;
                             if(option[0]=="modal") option[1] = option[1]=="true" ? true : false;
                             $( did ).dialog("option",option[0],option[1]);
                         }
                        
                     }else{
                         var w = $('body').width()*.9;
                        $("#udats-dialog" ).dialog("option","width",w).dialog("option","height",800).dialog("option","modal","true").dialog("option","position","center") ;
                         
                     }
                    // var w = Math.min($("#udats-dialog iframe").attr("width")*1.1,$('body').width()*.9);//reset width of the dialog;
                    // var h = Math.min($("#udats-dialog iframe").attr("height")*1.1,$('body').height()*.7);
                     var t = $(this).attr("href");
                     if(t.charAt(0)=="#"){
                         
                         $(t).dialog("open");
                         //$("#udats-dialog iframe").hide();
                     }else{
                        var w = $('body').width()*.9;
                    $('<div ><iframe src=' + t + '  width="' + w + '" height="'+ $("body").height()*.9 + '" scrolling="no"></iframe></div>').prependTo('body').dialog({
    autoOpen: true,
    height:'800',
    width:'auto',
    modal:true,
    position:"center",
    draggable:true,
    resizeable:true,
    close:function(){
        $(this).remove();
    },
    show:500
    

});
                     
                     }
                     
                    //$( "#udats-dialog" ).dialog("option","width",w).dialog("option","height",h).dialog( "open" );
                
                
                    
                     });
        
        
         }
         
         //glossary sort
         if($("div.udats-glossary, div.udats-faq").length){
        
            $("div.udats-glossary ul ul,div.udats-faq ul ul").not("li ul").each(function(index,element){
        var p = $(this).prev("li");
        
        //p.css("color","red");
        $(this).detach().appendTo(p);
    });
            $.getScript(domain + "listtricks-glossary.js", function(){
                var bgcolor = $(".ic-app-header__logomark-container").css("background-color");
                $("div.udats-glossary").each(function(){
                    
                    var searchme = $(this).children("ul:first").children("li").length >= 10 ? true : false;                 
                    var gwidth = $(this).attr("style")==undefined ? "240px" : $(this).css("width");
                $(this).listtricksGlossary({color:bgcolor,searchon:searchme,width:gwidth});
                });
                
                $("div.udats-faq").listtricksGlossary({color:bgcolor,deftarget:"inline",searchon:false,alpha:false,width:"auto"});
            });
            
         }
         
             //faq
         
         
         //quiz
         if($("div.udats-quiz").length){
            
        
            $.getScript(domain + "quiz.js", function(){
                var bgcolor = $(".ic-app-header__logomark-container").css("background-color");
                $(".udats-quiz").css("backgroundColor",bgcolor);
                $(".udats-quiz ol li > ol").delegate("li","click",function(obj){
                    if($(obj.target).attr("href"))return true;
                    $(this).children().show();
                    
                    var outcome = $(this).parents("li").attr("title");
                    //alert("add " + points + " to " + outcome);
                    //target_outcome = $("#" + outcome);
                    var status = $(this).data("points")=="1" ? "udats-correct" : "udats-incorrect";
                    var value = $(this).parents("li").children("span.value").text();
                    
                    if(status=="udats-incorrect"){
                        
                        $(this).parents("li").children(".value").text(Number(value)-1);
                    }else{
                        var mydiv = $(this).parents(".udats-quiz");
                        var score = mydiv.data("score") + Number(value);
                        var qp = mydiv.data("quizPoints")
                        mydiv.data("score",score);
                        mydiv.children(".udats-score").text("Score: "+ score + " out of " + qp);
                    }
                    $(this).addClass(status);
                    //$("#next_btn").show();
                    
                });//delegate
                var totalPoints = 0;
                $(".udats-quiz ol li ol").not("ol li ol li ol").each(function(index, element) {
                    
                    //$(this).parents("div").data("quizPoints",$(this).children("li").length);
                    $(this).before(" [ points possible: <span class='value'>" + ($(this).children("li").length-1) + "</span> ] ");
                    //totalPoints += $(this).children("li").length-1;
                    $(this).children('li:first').attr("data-points",1).siblings('li').attr("data-points",0);
                   //$(this).children('li:first').data("points",1);
                });//each
            
                $("div.udats-quiz").each(function(index, element) {
                    $(this).data("score",0);
                    var totalPoints = 0;
                    $(this).find("span.value").each(function(index, element) {
                        totalPoints += Number($(this).text());
                    });
                    //var qp = $(this).find("ol li ol li").not("ol li ol li ol li").length - 1;
                    $(this).data("quizPoints",totalPoints);
                    $(this).find("ol ol ol").hide();
                    $(this).find('ol li').not('ol li ol li').each(function(index, element) {
                        var mixed = $(this).children('ol').shuffle();
                        $(mixed).children("li").each(function(){
                            $(this).data("points",$(this).attr("data-points")).removeAttr("data-points");
                        });
                    });
                    $('<div class="udats-score">Score: 0 out of ' + totalPoints + '</div>').prependTo($(this))
                    //this.children(".udats-score").text("Score: "+ score + " out of " + qp);
                 });
            });//load script
        
         }//if quiz

    });//each
    }//end prototype enableUdats
})(jQuery);//end plugin
 loadCSS = function(href) {
   console.log(href);
     var cssLink = $("<link rel='stylesheet' type='text/css' href='"+href+"'>");
     $("head").append(cssLink);
 };
function udats_go(obj){//obj is a jQuery object passed by waitForKeyElements, we are not using it
  console.log("go");
 
 cloneForm();
    $(document,"#main").enableUdats();
    //obj.enableUdats();//this didn't make any difference I could detect
    return true;
  
}
function rightHamburger(){
  if($("#right-side-wrapper").css("display")=="none")return;
   $(".ic-app-nav-toggle-and-crumbs").append('<button type="button" aria-hidden="true" onclick="$(\'#right-side-wrapper\').toggle()" id="rightMenuToggle" class="Button Button--link Button--small ic-app-course-nav-toggle" title="Show and hide right menu" style="float:right"><i class="icon-hamburger"></i></button>');
}
var udatsRestoreMenu = true;
function udatsToggleChrome(){
    if($(".ic-app-nav-toggle-and-crumbs:visible").length>=1){
        $("#right-side-wrapper").hide();
        udatsRestoreMenu=$("#left-side").css("opacity");
        if($("#left-side").css("opacity")==1)$("#courseMenuToggle").click();
        $(".ic-app-nav-toggle-and-crumbs").hide();
    }else{
        $(".ic-app-nav-toggle-and-crumbs").show();
        if(udatsRestoreMenu)$("#courseMenuToggle").click();
    }
}


$(function() {
/*
$("#menu").append('<li  class="menu-item ic-app-header__menu-list-item"><a class="ic-app-header__menu-list-link" onclick="udatsToggleChrome()"><img src="http://apps.ats.udel.edu/canvas/project.png"><div class="menu-item__text">Projecting</div></a></li>');
loadCSS("https://apps.ats.udel.edu/canvas/threaded.css");*/
waitForKeyElements("#right-side",rightHamburger);

setTimeout(function(e) {
 if($(".udats-quiz,.udats-glossary,.udats-faq,.udats-dialog,.udats-quiz,.udats-tabs,.udats-accordion").length>0){
     loadCSS("https://apps.ats.udel.edu/canvas/udats-plugins.css");
     
    //cloneForm();
    $(document,"#main").enableUdats();
    }
},800);
     
 
//waitForKeyElements("#wiki_page_show",udats_go);


});

// Ally Integration

window.ALLY_CFG = {
    'baseUrl': 'https://prod.ally.ac',
    'clientId': 2335
};
$.getScript(ALLY_CFG.baseUrl + '/integration/canvas/ally.js');

////////////////////////////////////////////////////
// DESIGNPLUS CONFIG                            //
////////////////////////////////////////////////////
// Legacy
var DT_variables = {
        iframeID: '',
        // Path to the hosted USU Design Tools
        path: 'https://designtools.ciditools.com/',
        templateCourse: '1485564',
        // OPTIONAL: Button will be hidden from view until launched using shortcut keys
        hideButton: true,
         // OPTIONAL: Limit by course format
        limitByFormat: false, // Change to true to limit by format
         // adjust the formats as needed. Format must be set for the course and in this array for tools to load
        formatArray: [
            'online',
            'on-campus',
            'blended'
        ],
        // OPTIONAL: Limit tools loading by users role
        limitByRole: true, // set to true to limit to roles in the roleArray
        // adjust roles as needed
        roleArray: [
            'admin',
            'teacher'
        ],
        // OPTIONAL: Limit tools to an array of Canvas user IDs
        limitByUser: false, // Change to true to limit by user
        // add users to array (Canvas user ID not SIS user ID)
        userArray: [
            '1234',
            '987654'
        ]
};

// New
DpPrimary = {
    lms: 'canvas',
    templateCourse: '1783857',
    hideButton: true,
    hideLti: false,
    extendedCourse: '', // added in sub-account theme
    sharedCourse: '', // added from localStorage
    courseFormats: [],
    canvasRoles: [],
    canvasUsers: [],
    canvasCourseIds: [],
    plugins: [],
    excludedModules: [],
    includedModules: [],
    lang: 'en',
    defaultToLegacy: true,
    enableVersionSwitching: true,
    hideSwitching: false,
}

// merge with extended/shared customizations config
DpConfig = { ...DpPrimary, ...(window.DpConfig ?? {}) }

$(function () {
    const uriPrefix = (location.href.includes('.beta.')) ? 'beta.' : '';
    const toolsUri = (DpConfig.toolsUri) ? DpConfig.toolsUri : `https://${uriPrefix}designplus.ciditools.com/`;
    $.getScript(`${toolsUri}js/controller.js`);
});
////////////////////////////////////////////////////
// END DESIGNPLUS CONFIG                        //
////////////////////////////////////////////////////
